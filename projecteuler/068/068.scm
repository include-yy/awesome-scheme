(define unique?
  (lambda (lst)
    (cond
     ((null? (cdr lst)) #t)
     ((member (car lst) (cdr lst)) #f)
     (else
      (unique? (cdr lst))))))

(let pro ([i 1])
  (if (= i 11) '()
      (let f1 ([i1 1])
	(if (= i1 11) (pro (+ i 1))
	    (let f2 ([i2 1])
	      (if (= i2 11) (f1 (+ i1 1))
		  (let f3 ([i3 1])
		    (if (= i3 11) (f2 (+ i2 1))
			(let f4 ([i4 1])
			  (if (= i4 11) (f3 (+ i3 1))
			      (let f5 ([i5 1])
				(if (= i5 11) (f4 (+ i4 1))
				    (let f6 ([i6 1])
				      (if (= i6 11) (f5 (+ i5 1))
					  (let f7 ([i7 1])
					    (if (= i7 11) (f6 (+ i6 1))
						(let f8 ([i8 1])
						  (if (= i8 11) (f7 (+ i7 1))
						      (let f9 ([i9 1])
							(let ([lst (list i i1 i2 i3 i4 i5 i6 i7 i8 i9)])
							(cond
							 ((= i9 11) (f8 (+ i8 1)))
							 ((unique? lst)
							  (if (= (+ i i1 i5) (+ i1 i2 i6)
								 (+ i2 i3 i7) (+ i3 i4 i8) (+ i i4 i9))
							      (cons lst (f9 (+ i9 1)))
							      (f9 (+ i9 1))))
							 (else
							  (f9 (+ i9 1))))))))))))))))))))))))

#|
(time (let pro ...))
    221084 collections
    281.656250000s elapsed cpu time, including 2.781250000s collecting
    283.159159792s elapsed real time, including 3.539354996s collecting
    932604772360 bytes allocated, including 932607045632 bytes reclaimed
((1 3 5 2 4 10 6 7 8 9) (1 4 2 5 3 9 8 7 6 10)
 (1 5 9 3 7 10 2 4 6 8) (1 7 3 4 10 8 6 9 2 5)
 (1 7 3 9 5 8 6 4 2 10) (1 7 8 4 10 9 2 5 3 6)
 (1 10 4 3 7 5 2 9 6 8) (1 10 4 8 7 6 3 5 2 9)
 (2 4 1 3 5 8 9 10 6 7) (2 5 3 1 4 7 6 10 9 8)
 (2 6 10 4 8 9 1 3 5 7) (2 8 4 10 6 7 5 3 1 9)
 (3 1 4 2 5 10 9 8 7 6) (3 4 10 1 7 9 2 5 8 6)
 (3 5 2 4 1 6 7 8 9 10) (3 7 1 5 9 6 8 10 2 4)
 (3 7 1 10 4 6 8 5 2 9) (3 9 5 1 7 4 2 10 8 6)
 (4 1 3 5 2 9 10 6 7 8) (4 2 5 3 1 8 7 6 10 9)
 (4 3 7 1 10 9 6 8 5 2) (4 8 2 6 10 5 7 9 1 3)
 (4 8 7 1 10 5 2 9 6 3) (4 10 1 7 3 2 5 8 6 9)
 (4 10 1 7 8 3 6 9 2 5) (4 10 6 2 8 3 1 9 7 5)
 (5 1 7 3 9 10 8 6 4 2) (5 2 4 1 3 7 8 9 10 6)
 (5 3 1 4 2 6 10 9 8 7) (5 9 3 7 1 2 4 6 8 10)
 (6 2 8 4 10 9 7 5 3 1) (6 8 10 7 9 5 1 2 3 4)
 (6 9 7 10 8 4 3 2 1 5) (6 10 4 8 2 1 3 5 7 9)
 (7 1 5 9 3 8 10 2 4 6) (7 1 10 4 3 8 5 2 9 6)
 (7 1 10 4 8 9 6 3 5 2) (7 3 4 10 1 6 9 2 5 8)
 (7 3 9 5 1 6 4 2 10 8) (7 8 4 10 1 2 5 3 6 9)
 (7 9 6 8 10 3 4 5 1 2) (7 10 8 6 9 2 1 5 4 3)
 (8 2 6 10 4 7 9 1 3 5) (8 4 10 1 7 5 3 6 9 2)
 (8 4 10 6 2 5 3 1 9 7) (8 6 9 7 10 5 4 3 2 1)
 (8 7 1 10 4 2 9 6 3 5) (8 10 7 9 6 1 2 3 4 5)
 (9 3 7 1 5 4 6 8 10 2) (9 5 1 7 3 2 10 8 6 4)
 (9 6 8 10 7 4 5 1 2 3) (9 7 10 8 6 3 2 1 5 4)
 (10 1 7 3 4 5 8 6 9 2) (10 1 7 8 4 6 9 2 5 3)
 (10 4 3 7 1 2 9 6 8 5) (10 4 8 2 6 3 5 7 9 1)
 (10 4 8 7 1 3 5 2 9 6) (10 6 2 8 4 1 9 7 5 3)
 (10 7 9 6 8 2 3 4 5 1) (10 8 6 9 7 1 5 4 3 2))
|#
(define final
   '((1 3 5 2 4 10 6 7 8 9) (1 4 2 5 3 9 8 7 6 10)
     (1 5 9 3 7 10 2 4 6 8) (1 7 3 4 10 8 6 9 2 5)
     (1 7 3 9 5 8 6 4 2 10) (1 7 8 4 10 9 2 5 3 6)
     (1 10 4 3 7 5 2 9 6 8) (1 10 4 8 7 6 3 5 2 9)
     (2 4 1 3 5 8 9 10 6 7) (2 5 3 1 4 7 6 10 9 8)
     (2 6 10 4 8 9 1 3 5 7) (2 8 4 10 6 7 5 3 1 9)
     (3 1 4 2 5 10 9 8 7 6) (3 4 10 1 7 9 2 5 8 6)
     (3 5 2 4 1 6 7 8 9 10) (3 7 1 5 9 6 8 10 2 4)
     (3 7 1 10 4 6 8 5 2 9) (3 9 5 1 7 4 2 10 8 6)
     (4 1 3 5 2 9 10 6 7 8) (4 2 5 3 1 8 7 6 10 9)
     (4 3 7 1 10 9 6 8 5 2) (4 8 2 6 10 5 7 9 1 3)
     (4 8 7 1 10 5 2 9 6 3) (4 10 1 7 3 2 5 8 6 9)
     (4 10 1 7 8 3 6 9 2 5) (4 10 6 2 8 3 1 9 7 5)
     (5 1 7 3 9 10 8 6 4 2) (5 2 4 1 3 7 8 9 10 6)
     (5 3 1 4 2 6 10 9 8 7) (5 9 3 7 1 2 4 6 8 10)
     (6 2 8 4 10 9 7 5 3 1) (6 8 10 7 9 5 1 2 3 4)
     (6 9 7 10 8 4 3 2 1 5) (6 10 4 8 2 1 3 5 7 9)
     (7 1 5 9 3 8 10 2 4 6) (7 1 10 4 3 8 5 2 9 6)
     (7 1 10 4 8 9 6 3 5 2) (7 3 4 10 1 6 9 2 5 8)
     (7 3 9 5 1 6 4 2 10 8) (7 8 4 10 1 2 5 3 6 9)
     (7 9 6 8 10 3 4 5 1 2) (7 10 8 6 9 2 1 5 4 3)
     (8 2 6 10 4 7 9 1 3 5) (8 4 10 1 7 5 3 6 9 2)
     (8 4 10 6 2 5 3 1 9 7) (8 6 9 7 10 5 4 3 2 1)
     (8 7 1 10 4 2 9 6 3 5) (8 10 7 9 6 1 2 3 4 5)
     (9 3 7 1 5 4 6 8 10 2) (9 5 1 7 3 2 10 8 6 4)
     (9 6 8 10 7 4 5 1 2 3) (9 7 10 8 6 3 2 1 5 4)
     (10 1 7 3 4 5 8 6 9 2) (10 1 7 8 4 6 9 2 5 3)
     (10 4 3 7 1 2 9 6 8 5) (10 4 8 2 6 3 5 7 9 1)
     (10 4 8 7 1 3 5 2 9 6) (10 6 2 8 4 1 9 7 5 3)
     (10 7 9 6 8 2 3 4 5 1) (10 8 6 9 7 1 5 4 3 2)))

(define new
(map (lambda (ls) (list (list-ref ls 5)
			(list-ref ls 0)
			(list-ref ls 1)
			(list-ref ls 6)
			(list-ref ls 1)
			(list-ref ls 2)
			(list-ref ls 7)
			(list-ref ls 2)
			(list-ref ls 3)
			(list-ref ls 8)
			(list-ref ls 3)
			(list-ref ls 4)
			(list-ref ls 9)
			(list-ref ls 4)
			(list-ref ls 0))) final))


((10 1 3 6 3 5 7 5 2 8 2 4 9 4 1)
 (9 1 4 8 4 2 7 2 5 6 5 3 10 3 1)
 (10 1 5 2 5 9 4 9 3 6 3 7 8 7 1)
 (8 1 7 6 7 3 4 3 9 2 9 5 10 5 1)
 (8 2 4 9 4 1 10 1 3 6 3 5 7 5 2)
 (7 2 5 6 5 3 10 3 1 9 1 4 8 4 2)
 (10 3 1 9 1 4 8 4 2 7 2 5 6 5 3)
 (6 3 5 7 5 2 8 2 4 9 4 1 10 1 3)
 (6 3 7 8 7 1 10 1 5 2 5 9 4 9 3)
 (4 3 9 2 9 5 10 5 1 8 1 7 6 7 3)
 (9 4 1 10 1 3 6 3 5 7 5 2 8 2 4)
 (8 4 2 7 2 5 6 5 3 10 3 1 9 1 4)
 (10 5 1 8 1 7 6 7 3 4 3 9 2 9 5)
 (7 5 2 8 2 4 9 4 1 10 1 3 6 3 5)
 (6 5 3 10 3 1 9 1 4 8 4 2 7 2 5)
 (2 5 9 4 9 3 6 3 7 8 7 1 10 1 5)
 (8 7 1 10 1 5 2 5 9 4 9 3 6 3 7)
 (6 7 3 4 3 9 2 9 5 10 5 1 8 1 7))


((6 3 5 7 5 2 8 2 4 9 4 1 10 1 3)
 (6 5 3 10 3 1 9 1 4 8 4 2 7 2 5)
 (2 5 9 4 9 3 6 3 7 8 7 1 10 1 5))

6531031914842725
